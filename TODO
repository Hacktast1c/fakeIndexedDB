adapters
- JsArray
  - reassess how anything involving keys and ranges is done, so it'll be general enough for other adapters
    - need to be able to use one compare function for all sorting crap (ranges, get, inserts, etc)
      - this could be tricky for indexes, since they sort by key and then by value
  - use compareKeys/unique options like BST
  - RecordStore.prototype.find filter should be getAll, right?
- BTree
  - if keys are {key, value}, then how will getting a bound work when value matters or not?
  - currently storing whole record as key and value. that is suboptimal
    - see getAll retrieval for key, it's fucked up
  - would be nice if we could iterate rather than getting whole range (see getAll in get, find)
- rename folder to something like recordStoreAdapters

define functions on prototype (like JsArray) or on this in constructor (like elsewhere)? probably the former

FDBObjectStore.count and FDBIndex.count should use cursors, not getAll, because getAll could read a lot into memory at once

test that IDBObjectStore.index returns the same or different IDBIndex depending on situation http://www.w3.org/TR/2015/REC-IndexedDB-20150108/#widl-IDBObjectStore-index-IDBIndex-DOMString-name

Other tests
- ideally run these in the browser (and w3c original ones too)
  - https://chromium.googlesource.com/chromium/blink/+/72fef91ac1ef679207f51def8133b336a6f6588f/LayoutTests/storage/indexeddb
  - https://github.com/mozilla/gecko-dev/tree/master/dom/indexedDB/test

multiple readonly transactions should be allowed to run at the same time (but not readwrite, they should be all alone)

objectStoreNames and indexNames should be DOMStringLists
- see https://github.com/facebookarchive/IndexedDB-polyfill/blob/master/indexedDB.polyfill.js#L36
- http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMStringList
- do real implementations really not support [] indexing?

readonly properties need to actually be readonly
- done in FDBCursor, but messy if other classes need to update a value that is to be presented to the user as readonly, like FDBCursorWithValue.value

share some code between Index and ObjectStore, like getValue, confirmActiveTransaction
- similar thing between open and deleteDatabase

break events stuff into separate module, maybe fakeDOMEvents
- readonly properties? hidden/non-enumerable properties?

go through and fix all the left comments (todo stuff)

reevaluate all uses of setImmedaite, setTimeout, nextTick

_ properties should be hidden from standard functions
- object.defineProperty enumerable?

For .filter calls that are deleting items from arrays (such as ObjectStore.deleteRecord) it might be faster to use splice as iterating over the array

btree? slice to add to middle of array is slow http://jsperf.com/splicing-a-single-value/19
- probably best: http://goneill.co.nz/btree.php
- https://github.com/santanubasu/BPlusJS
- http://www.conquex.com/b-tree-javascript-implementation/

what if my backend data storage was async? should make it easier to plug-and-play things besides JS objects

findIndex (and similar) could be replaced by smarter searches, like binary search if we know the list is sorted
- Given an array sorted in ascending order, find the lowest value of i where array[i] >= x
  - use this to replace findIndex in storeInIndex in Index.js

array.prototype.find and array.prototype.findindex dependencies won't be needed, eventually